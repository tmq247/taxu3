import re
import os
from asyncio import gather, get_event_loop, sleep
#from pyromod import Client, Message, listen
from aiohttp import ClientSession
from pyrogram import Client, filters, idle
from Python_ARQ import ARQ
import requests
import random
from datetime import datetime, timedelta
import time
import atexit
import pytz
import threading
import asyncio
from pyrogram import filters
from pyrogram.enums import MessageEntityType
from pyrogram.types import ForceReply, Message, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent, MessageEntity
from pyrogram.filters import command
from functions import (
    extract_user,
    extract_user_and_reason,
    time_converter
)
from pyrogram.types import (InlineQueryResultArticle, InputTextMessageContent,
                            InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup)
#from telebot.util import quick_markup
#from keyboard import ikb
#from pykeyboard import InlineKeyboard
from pyromod.exceptions import ListenerTimeout
from config import bot_token, bot_token2, bot_token3, group_id, group_id2, group_id3, admin_id, admin_id2, admin_id3

is_config = os.path.exists("config.py")

if is_config:
    from config import *
else:
    from sample_config import *

bot = Client(
    ":taxu:",
    bot_token=bot_token2,
    api_id=api_id,
    api_hash=api_hash,
)

bot_id = int(bot_token.split(":")[0])
client = bot
# D√πng tr·∫°ng th√°i (state) ƒë·ªÉ theo d√µi qu√° tr√¨nh c∆∞·ª£c
user_state = {}
rut = {}
nap = {}
# D√πng t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng
user_balance = {}
# T·∫°o t·ª´ ƒëi·ªÉn l∆∞u l·ªãch s·ª≠ c∆∞·ª£c v√† l·ªãch s·ª≠ r√∫t ti·ªÅn
user_bet_history = {}
user_withdraw_history = {}
napuser_withdraw_history = {}
# T·∫°o t·ª´ ƒëi·ªÉn gitcodes
used_gitcodes = []
gitcode_amounts = {}
user_pending_gitcodes = {}
# Define a separate dictionary to track user game states
user_game_state = {}
# Dictionary to store user balances (user_id: balance)
user_balances = {}
# Dictionary to store user bets
user_bets = {}  # {user_id: {"bet_type": "", "amount": 0, "chosen_number": ""}}

def get_user_info(user_id):
  try:
    user = bot.get_chat(user_id)
    return user
  except Exception as e:
    print("Error fetching user info:", e)
    return None

# H√†m ƒë·ªÉ l∆∞u t·∫•t c·∫£ s·ªë d∆∞ v√†o t·ªáp vƒÉn b·∫£n
def save_balance_to_file():
  with open("id.txt", "w") as f:
    for user_id, balance in user_balance.items():
      f.write(f"{user_id} {balance}\n")

# H√†m ƒë·ªÉ ƒë·ªçc s·ªë d∆∞ t·ª´ t·ªáp vƒÉn b·∫£n v√† c·∫≠p nh·∫≠t v√†o t·ª´ ƒëi·ªÉn user_balance
def load_balance_from_file():
  if os.path.exists("id.txt"):
    with open("id.txt", "r") as f:
      for line in f:
        user_id, balance_str = line.strip().split()
        balance = float(balance_str)
        if balance.is_integer():
          balance = int(balance)
        user_balance[int(user_id)] = balance

# G·ªçi h√†m load_balance_from_file khi ch∆∞∆°ng tr√¨nh ch·∫°y ƒë·ªÉ t·∫£i s·ªë d∆∞ t·ª´ t·ªáp
#load_balance_from_file()

# Add these variables for Gitcode handling
GITCODE_FILE = "gitcode.txt"
# Function to create a Gitcode with a custom amount
def create_gitcode(amount):
    gitcode = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))
    gitcode_amounts[gitcode] = amount
    with open(GITCODE_FILE, "a") as f:
        f.write(f"{gitcode}:{amount}\n")
    return gitcode

# Function to read Gitcodes from the file
def read_gitcodes():
    if not os.path.exists(GITCODE_FILE):
        return
    with open(GITCODE_FILE, "r") as f:
        for line in f:
            gitcode, amount = line.strip().split(":")
            gitcode_amounts[gitcode] = int(amount)

# Function to remove a used Gitcode
def remove_gitcode(gitcode):
    with open(GITCODE_FILE, "r") as f:
        lines = f.readlines()
    with open(GITCODE_FILE, "w") as f:
        for line in lines:
            if not line.startswith(gitcode):
                f.write(line)


@bot.on_message(filters.command("taocode"))
async def create_gitcode_handler(_, message: Message):
    if message.from_user.id not in admin:
      return await message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
    if len(message.text.split()) != 2:
      return await message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn cho giftcode.V√≠ d·ª•: /regcode 1000")
    lenh, amount = message.text.split(" ", 2)
    try:
      val = int(amount)
      await process_gitcode_amount(message, amount)
    except ValueError:
      return await message.reply_text("S·ªë ti·ªÅn cho giftcode ph·∫£i l√† s·ªë nguy√™n.")

async def process_gitcode_amount(message, amount):
    try:
        amount = int(amount)
        formatted_amount = "{:,.0f}".format(amount).replace(".", ",")
        gitcode = create_gitcode(amount)
        await message.reply_text(f"ƒê√£ t·∫°o giftcode th√†nh c√¥ng. Giftcode c·ªßa b·∫°n l√†: {gitcode} ({formatted_amount} ƒëi·ªÉm).")
    except ValueError:
        await message.reply_text("S·ªë ƒëi·ªÉm kh√¥ng h·ª£p l·ªá.")

@bot.on_message(filters.command("code"))
async def naptien_gitcode(_, message: Message):
    read_gitcodes()
    from_user = message.from_user.id
    if from_user not in user_balance:
        user_balance[user_id] = 0
    if len(message.text.split()) != 2:
       return await message.reply_text("Nh·∫≠p Code b·∫±ng l·ªánh /code [d·∫•u c√°ch] code c·ªßa b·∫°n \n‚û°Ô∏èVD: /code ABCD") 
    if len(message.text.split()) == 2:
      user_id = message.from_user.id
      lenh, gitcode = message.text.split()
      if gitcode in gitcode_amounts:
        await process_naptien_gitcode(user_id, gitcode, message)
      else:
          await message.reply_text("Giftcode kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")
    
async def process_naptien_gitcode(user_id, gitcode, message):
    load_balance_from_file()
    if gitcode in gitcode_amounts:
        amount = gitcode_amounts[gitcode]
        # Check if the user's balance exists in the dictionary, initialize it if not
        if user_id not in user_balance:
            user_balance[user_id] = 0
            save_balance_to_file()
        user_balance[user_id] += amount
        remove_gitcode(gitcode)
        del gitcode_amounts[gitcode]
        await message.reply_text(f"Nh·∫≠p Giftcode Th√†nh C√¥ng!\nS·ªë ƒëi·ªÉm c·ªßa b·∫°n l√†: {user_balance[user_id]:,}ƒë.\nüíπCh√∫c B·∫°n May M·∫Øn Nh√©üíñ")
        # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c send_message ƒë·ªÉ g·ª≠i th√¥ng b√°o v√†o nh√≥m
        await bot.send_message(group_id3, f"""
Ng∆∞·ªùi ch∆°i {message.from_user.mention} 
User: {user_id}
ƒê√£ N·∫°p: {amount:,}ƒë b·∫±ng Giftcode.""")
        # Save the updated balance to the file
        save_balance_to_file()
    else:
        await message.reply_text("Giftcode kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")



############################################

# H√†m x·ª≠ l√Ω chuy·ªÉn ti·ªÅn v√† c·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi ƒë∆∞·ª£c chuy·ªÉn
async def deduct_balance(from_user, user_id, amount, message):
    amount = int(amount)
    if from_user not in user_balance or int(user_balance[from_user]) < amount:
      return await message.reply_text("B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë ƒëi·ªÉm ƒë·ªÉ t·∫∑ng ng∆∞·ªùi n√†y.")
    if amount <= 0 or int(user_balance[from_user]) < amount:
        return await message.reply_text("B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë ƒëi·ªÉm ƒë·ªÉ t·∫∑ng ng∆∞·ªùi n√†y.")
    # Tr·ª´ s·ªë ti·ªÅn t·ª´ s·ªë d∆∞ c·ªßa ng∆∞·ªùi g·ª≠i v√† c·ªông cho ng∆∞·ªùi ƒë∆∞·ª£c chuy·ªÉn
    user_balance[from_user] -= amount
    user_balance[user_id] += int(amount*0.95)

    # L∆∞u s·ªë d∆∞ v√†o t·ªáp vƒÉn b·∫£n
    save_balance_to_file()
    return True
    

@bot.on_message(filters.command("tangdiem"))
async def chuyentien_money(_, message: Message):
    from_user = message.from_user.id
    text = f"""
ƒê·ªÉ t·∫∑ng ƒëi·ªÉm c·ªßa m√¨nh cho ng∆∞·ªùi ch∆°i kh√°c b·∫±ng 2 c√°ch:
C√°ch 1:Tr·∫£ l·ªùi ng∆∞·ªùi mu·ªën t·∫∑ng ƒëi·ªÉm b·∫±ng l·ªánh /tangdiem [d·∫•u c√°ch] s·ªë ƒëi·ªÉm.
C√°ch 2:Tr·∫£ l·ªùi ng∆∞·ªùi mu·ªën t·∫∑ng ƒëi·ªÉm r·ªìi nh·∫≠p /id ƒë·ªÉ l·∫•y ID r·ªìi nh·∫≠p l·ªánh 
/tangdiem [d·∫•u c√°ch] ID v·ª´a l·∫•y [d·∫•u c√°ch] s·ªë ƒëi·ªÉm.
VD: /tangdiem 987654321 10000.
Ph√≠ t·∫∑ng ƒëi·ªÉm l√† 5%."""
    load_balance_from_file()
    if len(message.text.split()) != 3 or len(message.text.split()) != 2 :
        if len(message.text.split()) == 3:
            user_id, amount = await extract_user_and_reason(message)
            user = await bot.get_users(user_id)
            from_user1 = message.from_user.mention
            #lenh, user_id, amount = message.text.split(" ", 3)
            if amount.isdigit():
                if not user_id:
                    return await message.reply_text("kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y")
                if user_id not in user_balance:
                    user_balance[user_id] = 0
                if await deduct_balance(from_user, user_id, amount, message):
                    amount = int(amount)
                    await message.reply_text(f"{from_user1} ƒë√£ t·∫∑ng {user.mention} {int(amount*0.95):,}ƒë. Ph√≠ t·∫∑ng ƒëi·ªÉm l√† 5%")
                    await bot.send_message(user_id, f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {int(amount*0.95):,}ƒë ƒë∆∞·ª£c t·∫∑ng t·ª´ {from_user1}, id ng∆∞·ªùi d√πng l√†: {from_user}.")
                    await bot.send_message(group_id3, f"{from_user1} ƒë√£ t·∫∑ng {user.mention} {int(amount*0.95):,}ƒë. ID ng∆∞·ªùi t·∫∑ng l√†: {from_user}.")
                    return
            else:
                return await message.reply(text)
        
        #if and message.text[2:].isdigit():
        if len(message.text.split()) == 2 and message.reply_to_message:
            lenh, amount = message.text.split(" ", 2)
            if amount.isdigit():
                user_id = await extract_user(message)
                user = await bot.get_users(user_id)
                if not user_id:
                    return await message.reply_text("kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y")
                if user_id not in user_balance:
                    user_balance[user_id] = 0
                if await deduct_balance(from_user, user_id, amount, message):
                    amount = int(amount)
                    from_user1 = message.from_user.mention
                    await message.reply_text(f"{from_user1} ƒë√£ t·∫∑ng {user.mention} {int(amount*0.95):,}ƒë. Ph√≠ t·∫∑ng ƒëi·ªÉm l√† 5%")
                    await bot.send_message(user_id, f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {int(amount*0.95):,}ƒë ƒë∆∞·ª£c t·∫∑ng t·ª´ {from_user1}, id ng∆∞·ªùi d√πng l√†: {from_user}.")
                    await bot.send_message(group_id3, f"{from_user1} ƒë√£ t·∫∑ng {user.mention} {int(amount*0.95):,}ƒë, id ng∆∞·ªùi t·∫∑ng l√†: {from_user}.")
                    return
            
            else:
                return await message.reply(text)
        
        else:
            return await message.reply(text)

    else:
        return await message.reply(text)
       
@bot.on_message(filters.command("cdiem"))
async def set_balance_cong(_, message: Message):
  load_balance_from_file()
  from_user = message.from_user.id
  if from_user not in admin:
      return await message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
  if len(message.text.split()) != 3:
      return await message.reply_text("‚è≤Nh·∫≠p id v√† s·ªë ƒëi·ªÉm mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ \nüö¨(v√≠ d·ª•: /cdiem 12345 +1000 ho·∫∑c /cdiem 12345 -1000)üéö")
  #lenh, user_id, diem = message.text.split()
  #user = bot.get_users(user_id)
  user_id, diem = await extract_user_and_reason(message)
  user = await bot.get_users(user_id)
  if not user_id:
      return await message.reply_text("kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y")
  if user_id not in user_balance:
      user_balance[user_id] = 0
      #return await message.reply_text("Ng∆∞·ªùi d√πng n√†y ch∆∞a kh·ªüi ƒë·ªông bot.")
  elif diem.isdigit():
      await update_balance_cong(diem, user_id, message)
  else:
      return await message.reply_text("‚è≤Nh·∫≠p id v√† s·ªë ƒëi·ªÉm mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ \nüö¨(v√≠ d·ª•: /cdiem 12345 +1000 ho·∫∑c /cdiem 12345 -1000)üéö")
      #await update_balance(diem, user_id, message)
   
    
async def update_balance_cong(diem, user_id, message):
  chat_id = message.chat.id
  user = await bot.get_users(user_id)
  if user_id in user_balance and diem.isdigit():
    balance_change = int(diem)
    current_balance = user_balance.get(user_id, 0)
    new_balance = current_balance + balance_change
    user_balance[user_id] = new_balance
    save_balance_to_file()
    notification_message = f"""
ü´•B·∫°n ƒê√£ N·∫°p ƒêi·ªÉm Th√†nh C√¥ngü§ñ
ü´ÇS·ªë ƒêi·ªÉm Hi·ªán T·∫°i: {new_balance:,} ƒëi·ªÉmüê•
üêùCh√∫c B·∫°n Ch∆°i Game Vui V·∫ªüê≥
""" 
    text2 = f"""
ü´•{user.mention} ƒê√£ N·∫°p ƒêi·ªÉm Th√†nh C√¥ngü§ñ
ü´•ID {user_id}
ü´ÇS·ªë ƒêi·ªÉm C≈©: {new_balance-balance_change:,} ƒëi·ªÉmüê•
ü´ÇS·ªë ƒêi·ªÉm Hi·ªán T·∫°i: {new_balance:,} ƒëi·ªÉmüê•"""
    text = f"""üî•Ch√∫c m·ª´ng {user.mention} ƒë√£ b∆°m m√°u th√†nh c√¥ng‚ö°Ô∏è‚ö°Ô∏è"""
    await bot.send_message(user_id, notification_message)
    await bot.send_message(group_id3, text2)
    await bot.send_message(group_id, text)
      
  else:
    await message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt s·ªë ƒëi·ªÉm h·ª£p l·ªá.‚è≤Nh·∫≠p id v√† s·ªë ƒëi·ªÉm mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ \nüö¨(v√≠ d·ª•: /cdiem 12345 +1000 ho·∫∑c /cdiem 12345 -1000)üéö")


@bot.on_message(filters.command("tdiem"))
async def set_balance_tru(_, message: Message):
  load_balance_from_file()
  from_user = message.from_user.id
  if from_user not in admin:
      return await message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
  if len(message.text.split()) != 3:
      return await message.reply_text("‚è≤Nh·∫≠p id v√† s·ªë ƒëi·ªÉm mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ \nüö¨(v√≠ d·ª•: /cdiem 12345 +1000 ho·∫∑c /cdiem 12345 -1000)üéö")
  user_id, diem = await extract_user_and_reason(message)
  user = await bot.get_users(user_id)
  if not user_id:
      return await message.reply_text("kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y")
  if user_id not in user_balance:
      user_balance[user_id] = 0
  if diem.isdigit():
      await update_balance_tru(diem, user_id, message)
  else:
      return await message.reply_text("‚è≤Nh·∫≠p id v√† s·ªë ƒëi·ªÉm mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ \nüö¨(v√≠ d·ª•: /cdiem 12345 +1000 ho·∫∑c /cdiem 12345 -1000)üéö")
      #await update_balance(diem, user_id, message)
   
    
async def update_balance_tru(diem, user_id, message):
  chat_id = message.chat.id
  user = await bot.get_users(user_id)
  if user_id in user_balance and diem.isdigit():
    balance_change = int(diem)
    current_balance = user_balance.get(user_id, 0)
    if current_balance <= 0 and current_balance < balance_change:
        return await bot.send_message(group_id3, f"{user.mention} kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ tr·ª´")
    new_balance = current_balance - balance_change
    user_balance[user_id] = new_balance
    save_balance_to_file()
    #notification_message = f"""
#ü´•{user_ids.mention} ƒê√£ N·∫°p ƒêi·ªÉm Th√†nh C√¥ngü§ñ
#ü´•ID {user_id}
#ü´ÇS·ªë ƒêi·ªÉm Hi·ªán T·∫°i: {new_balance:,} ƒëi·ªÉmüê•
#üêùCh√∫c B·∫°n Ch∆°i Game Vui V·∫ªüê≥""" 
    text2 = f"""
ü´•ƒê√£ Tr·ª´ ƒêi·ªÉm {user.mention} Th√†nh C√¥ngü§ñ
ü´•ID {user_id}
ü´ÇS·ªë ƒêi·ªÉm C≈©: {new_balance+balance_change:,} ƒëi·ªÉmüê•
ü´ÇS·ªë ƒêi·ªÉm Hi·ªán T·∫°i: {new_balance:,} ƒëi·ªÉmüê•"""
    #text = f"""üî•Ch√∫c m·ª´ng {user_ids.mention} ƒë√£ b∆°m m√°u th√†nh c√¥ng‚ö°Ô∏è‚ö°Ô∏è"""
    #await bot.send_message(user_id, notification_message)
    await bot.send_message(group_id3, text2)
    #await bot.send_message(group_id, text)
      
  else:
    await message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt s·ªë ƒëi·ªÉm h·ª£p l·ªá.‚è≤Nh·∫≠p id v√† s·ªë ƒëi·ªÉm mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ \nüö¨(v√≠ d·ª•: /cdiem 12345 +1000 ho·∫∑c /cdiem 12345 -1000)üéö")




###########################

# H√†m hi·ªÉn th·ªã menu ch√≠nh
@bot.on_message(filters.command("start"))
async def show_main_menu(_, message: Message):
    user_id = message.from_user.id
    if user_id not in user_balance:
        user_balance[user_id] = 0  # Set initial balance to 0 for new users
        save_balance_to_file()  # Save user balances to the text file
    nut = [
        [
            InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot"),
            InlineKeyboardButton("V√†o nh√≥m ƒë·ªÉ ch∆°i GAME", url="https://t.me/sanhallwin"),
        ],
        [
            InlineKeyboardButton("Soi c·∫ßu", url="https://t.me/kqtaixiu"),
            InlineKeyboardButton("N·∫°p - R√∫t", url="https://t.me/diemallwin_bot"),
        ],]
    reply_markup = InlineKeyboardMarkup(nut)
    photo_url = "https://github.com/tmq247/taxu2/blob/main/photo_2023-12-14_21-31-58.jpg?raw=true"
    caption = """
<code>ùêí·∫£ùêßùê° ùêÄùêãùêã ùêñùêàùêç</code>
        
<b>‚ô®Ô∏èOpen 15-12 ‚ô®Ô∏è</b>

ü§ù <strong>N∆°i h·ªôi t·ª• c√°c chi·∫øn th·∫ßn t√†i-x·ªâu</strong> üéÅ

‚ö°Ô∏è <b>T·ªâ l·ªá th·∫Øng c∆∞·ª£c 1.95</b> üí∏

üî∞ <b>N·∫°p-r√∫t uy t√≠n, ch·∫•t l∆∞·ª£ng</b> üëå

üÜò <b>100% xanh ch√≠n</b> ‚úÖ

‚ö†Ô∏è <b>Tuy·ªát ƒë·ªëi kh√¥ng gian l·∫≠n ch·ªânh c·∫ßu</b> ‚ùóÔ∏è

üìé <b> https://t.me/sanhallwin</b> 

Kh·ªüi ƒë·ªông bot GAME v√† v√†o nh√≥m b√™n d∆∞·ªõi ƒë·ªÉ ch∆°i GAME
"""
    await bot.send_photo(message.chat.id,
                 photo_url,
                 caption=caption,
                 reply_markup=reply_markup)
    
    #await bot.send_message(message.chat.id, "Kh·ªüi ƒë·ªông bot GAME v√† v√†o nh√≥m b√™n d∆∞·ªõi ƒë·ªÉ ch∆°i GAME", reply_markup=reply_markup)

   
# H√†m ki·ªÉm tra s·ªë d∆∞
@bot.on_message(filters.command("diem"))
async def check_balance(_, message: Message):
  load_balance_from_file()
  user_id = message.from_user.id
  balance = user_balance.get(user_id, 0)
  await bot.send_message(user_id, f"""
üë§ T√™n t√†i kho·∫£n: {message.from_user.mention}
üí≥ ID T√†i kho·∫£n: {user_id}
üí∞ S·ªë d∆∞ c·ªßa b·∫°n: {balance:,} ƒë
        """)

client = bot
@bot.on_message(filters.command("rut"))
async def withdraw_balance(_, message: Message):
  chat_id = message.chat.id
  user_id = message.from_user.id
  rut[user_id] = "withdraw_method"
  user_game_state.pop(user_id, None)  # Clear game state to avoid conflicts

  ruttien = [[InlineKeyboardButton("R√∫t qua MoMo", callback_data="_momo")],
   [InlineKeyboardButton("R√∫t qua ng√¢n h√†ng", callback_data="_bank")]]
  markup = InlineKeyboardMarkup(ruttien)
    # T·∫°o b√†n ph√≠m cho ph∆∞∆°ng th·ª©c r√∫t
  if chat_id == group_id:
    await bot.send_message(chat_id, "Vui l√≤ng nh·∫Øn tin ri√™ng v·ªõi bot")
  await bot.send_message(user_id, "Ch·ªçn ph∆∞∆°ng th·ª©c r√∫t ƒëi·ªÉm:", reply_markup=markup)

#rut momo
@bot.on_callback_query(filters.regex("_momo"))
async def handle_withdrawal_method_selection_momo(_, callback_query):
  user_id = callback_query.from_user.id
  
  if filters.regex("_momo"):
    rut[user_id] = "momo_account"
    await bot.send_message(user_id, "Nh·∫≠p s·ªë MoMo c·ªßa b·∫°n:")
    rutdiem = await client.listen(user_id=user_id)
    await process_account_inforut(_, rutdiem, user_id)
    
  #await bot.answer_callback_query(callback_query.id, "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c r√∫t ƒëi·ªÉm.")

#rut bank
@bot.on_callback_query(filters.regex("_bank"))
async def handle_withdrawal_method_selection_bank(_, callback_query):
    user_id = callback_query.from_user.id
    rut[user_id] = "bank_account"
    await bot.send_message(
          user_id, """
Nh·∫≠p th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n:
STK + M√É NG√ÇN H√ÄNG
VD: 0987654321 VCB 
T√äN NG√ÇN H√ÄNG - M√É NG√ÇN H√ÄNG
üìå Vietcombank => VCB
üìå BIDV => BIDV 
üìå Vietinbank => VTB
üìå Techcombank => TCB
üìå MB Bank => MBB 
üìå Agribank => AGR 
üìå TienPhong Bank => TPB
üìå SHB bank => SHB
üìå ACB => ACB 
üìå Maritime Bank => MSB
üìå VIB => VIB
üìå Sacombank => STB
üìå VP Bank => VPB
üìå SeaBank => SEAB
üìå Shinhan bank Vi·ªát Nam => SHBVN
üìå Eximbank => EIB 
üìå KienLong Bank => KLB 
üìå Dong A Bank => DAB 
üìå HD Bank => HDB 
üìå LienVietPostBank => LPB 
üìå VietBank => VBB
üìå ABBANK => ABB 
üìå PG Bank => PGB
üìå PVComBank => PVC
üìå Bac A Bank => BAB 
üìå Sai Gon Commercial Bank => SCB
üìå BanVietBank => VCCB 
üìå Saigonbank => SGB
üìå Bao Viet Bank => BVB  
üìå Orient Commercial Bank => OCB 

‚ö†Ô∏è L∆∞u √Ω: ‚ùå Kh√¥ng h·ªó tr·ª£ ho√†n ti·ªÅn n·∫øu b·∫°n nh·∫≠p sai th√¥ng tin T√†i kho·∫£n. 
‚ùóÔ∏è R√∫t min 50K
  """)
    rutdiem = await client.listen(user_id=user_id)
    await process_account_inforut(_, rutdiem, user_id)

    #await bot.answer_callback_query(callback_query.id, "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c r√∫t ƒëi·ªÉm.")


        
#@bot.on_message(filters.reply & rut in ["momo_account"] or ["bank_account"])
async def process_account_inforut(_, rutdiem, user_id):
  load_balance_from_file()
  if user_id in rut and rut in ["momo_account"] or ["bank_account"]:
    try:
      account_info = rutdiem.text
      #user_id = message.from_user.id

      if rut[user_id] == "momo_account":
        rut[user_id] = (account_info, "withdraw_amount_momo")
        await bot.send_message(user_id, """
‚ùóÔ∏èNh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën r√∫t qua MoMoüíÆ
üö´VD: 50000 - 50000000üöÆ
              """)
        diemrut = await client.listen(user_id=user_id)
        await process_withdraw_amountrut(diemrut, user_id)
      elif rut[user_id] == "bank_account":
        rut[user_id] = (account_info, "withdraw_amount_bank")
        await bot.send_message(user_id, """
‚ùóÔ∏èNh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën r√∫t qua ng√¢n h√†ngüíÆ
üö´VD: 50000 - 50000000üöÆ
              """)
        diemrut = await client.listen(user_id=user_id)
        await process_withdraw_amountrut(diemrut, user_id)
    except ValueError:
      pass
  

#@bot.on_message(filters.text & rut in ["withdraw_amount_momo"] or ["withdraw_amount_bank"])
async def process_withdraw_amountrut(diemrut, user_id):
  load_balance_from_file()
  if user_id in rut and rut[user_id][1] in ["withdraw_amount_momo"] or ["withdraw_amount_bank"]:
    user = await bot.get_users(user_id)
    if diemrut.text.isdigit():
      account_info, withdraw_amount_type = rut[user_id]
      withdraw_amount = int(diemrut.text)
      user_balance_value = user_balance.get(user_id, 0)
      if withdraw_amount < 50000:
        await bot.send_message(user_id, 
            """
üñá S·ªë ƒëi·ªÉm r√∫t ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 50,000 ƒë·ªìng.üó≥
              """)
        del rut[user_id]
        return

      if withdraw_amount > user_balance_value:
        await bot.send_message(user_id,
            """
üåÄS·ªë ƒëi·ªÉm r√∫t c·ªßa b·∫°n kh√¥ng ƒë·ªßüí≥
ü™´Vui L√≤ng üîéCh∆°i Ti·∫øpüîç ƒê·ªÉ C√≥ Th√™m ƒêi·ªÉmüíé
              """)
        del rut[user_id]
        return

      # Tr·ª´ s·ªë ti·ªÅn t·ª´ s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
      user_balance_value -= withdraw_amount
      user_balance[user_id] = user_balance_value

      with open("id.txt", "r") as f:
        lines = f.readlines()

      with open("id.txt", "w") as f:
        for line in lines:
          user_id_str, balance_str = line.strip().split()
          if int(user_id_str) == user_id:
            balance = int(balance_str)
            if withdraw_amount <= balance:
              balance -= withdraw_amount
              f.write(f"{user_id} {balance}\n")
            else:
              await bot.send_message(user_id, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t ƒëi·ªÉm.")
          else:
            f.write(line)

      formatted_balance = "{:,.0f} ƒë".format(user_balance_value)
      account_type = "MoMo" if withdraw_amount_type == "withdraw_amount_momo" else "ng√¢n h√†ng"
      await bot.send_message(user_id,
          f"""
‚è∫L·ªánh r√∫t: {withdraw_amount:,} VNƒêüîö
‚úÖC·ªßa b·∫°n v·ªÅ {account_type}: {account_info} ƒëang ch·ªù h·ªá th·ªëng x·ª≠ l√Ωüîö
‚ò¢Ô∏èS·ªë ƒëi·ªÉm khi ch∆∞a r√∫t: {user_balance_value+withdraw_amount:,}
              """)

      request_message = f"""
‚û§T√™n Ng∆∞·ªùi R√∫t: {user.mention} 
‚û§ID Ng∆∞·ªùi R√∫t: {user.id} 
‚û§Y√™u C·∫ßu R√∫t: {withdraw_amount:,} VNƒê 
‚û§V·ªÅ {account_type}: {account_info}
          """
      requests.get(f"https://api.telegram.org/bot{bot_token3}/sendMessage?chat_id={admin_id}&text={request_message}")
      requests.get(f"https://api.telegram.org/bot{bot_token3}/sendMessage?chat_id={admin_id2}&text={request_message}")
      requests.get(f"https://api.telegram.org/bot{bot_token3}/sendMessage?chat_id={admin_id3}&text={request_message}")
      await bot.send_message(group_id3, request_message)

      del rut[user_id]
        
      time.sleep(10)
      user_notification = f"""
üì¨ R√∫t ƒëi·ªÉm th√†nh c√¥ng!
‚è∫ S·ªë ƒëi·ªÉm r√∫t: {withdraw_amount:,} VNƒê
üìà S·ªë ƒëi·ªÉm c√≤n l·∫°i: {formatted_balance}
          """
      await bot.send_message(user_id, user_notification)
      await bot.send_message(group_id, f"""{user.mention} ƒë√£ r√∫t ƒëi·ªÉm th√†nh c√¥ng. Xin ch√∫c m·ª´ngü•≥ü•≥ü•≥""")
    else:
      await bot.send_message(user_id, "L·ªói!!! Vui l√≤ng th·ª≠ l·∫°i.")
  else:
    await bot.send_message(user_id, "L·ªói!!! Vui l√≤ng th·ª≠ l·∫°i.")



####################################

# H√†m n·∫°p ti·ªÅn t√†i kho·∫£n
@bot.on_message(filters.command("nap"))
async def napwithdraw_balance(_, message: Message):
  chat_id = message.chat.id
  user_id = message.from_user.id
  nap[user_id] = "napwithdraw_method"
  user_game_state.pop(user_id, None)  # Clear game state to avoid conflicts

  naptien = [[InlineKeyboardButton("N·∫°p qua MoMo", callback_data="_napmomo")],
  [InlineKeyboardButton("N·∫°p qua ng√¢n h√†ng", callback_data="_napbank")]]
  markup = InlineKeyboardMarkup(naptien)
   # T·∫°o b√†n ph√≠m cho ph∆∞∆°ng th·ª©c r√∫t
  if chat_id == group_id:
    await bot.send_message(chat_id,
                   "Vui l√≤ng nh·∫Øn tin ri√™ng v·ªõi bot")
  await bot.send_message(user_id,
                   "Ch·ªçn ph∆∞∆°ng th·ª©c n·∫°p ƒëi·ªÉm:",
                   reply_markup=markup)
  
@bot.on_callback_query(filters.regex("_napmomo"))
async def naphandle_withdrawal_method_selectionmomo(_, callback_query):
  user_id = callback_query.from_user.id

  if filters.regex("_napmomo"):
    nap[user_id] = "napmomo_account"
    await bot.send_message(user_id, "Nh·∫≠p s·ªë MoMo c·ªßa b·∫°n:")
    napdiem = await client.listen(user_id=user_id)
    await process_account_info_nap(_, napdiem, user_id)
  #await bot.answer_callback_query(callback_query.id, "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c n·∫°p ƒëi·ªÉm.")

@bot.on_callback_query(filters.regex("_napbank"))
async def naphandle_withdrawal_method_selectionbank(_, callback_query):
    user_id = callback_query.from_user.id
    nap[user_id] = "napbank_account"
    await bot.send_message(
        user_id, """***
Nh·∫≠p th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n:
STK + M√É NG√ÇN H√ÄNG
VD: 0987654321 VCB
 T√äN NG√ÇN H√ÄNG - M√É NG√ÇN H√ÄNG
üìå Vietcombank => VCB
üìå BIDV => BIDV 
üìå Vietinbank => VTB
üìå Techcombank => TCB
üìå MB Bank => MBB 
üìå Agribank => AGR 
üìå TienPhong Bank => TPB
üìå SHB bank => SHB
üìå ACB => ACB 
üìå Maritime Bank => MSB
üìå VIB => VIB
üìå Sacombank => STB
üìå VP Bank => VPB
üìå SeaBank => SEAB
üìå Shinhan bank Vi·ªát Nam => SHBVN
üìå Eximbank => EIB 
üìå KienLong Bank => KLB 
üìå Dong A Bank => DAB 
üìå HD Bank => HDB 
üìå LienVietPostBank => LPB 
üìå VietBank => VBB
üìå ABBANK => ABB 
üìå PG Bank => PGB
üìå PVComBank => PVC
üìå Bac A Bank => BAB 
üìå Sai Gon Commercial Bank => SCB
üìå BanVietBank => VCCB 
üìå Saigonbank => SGB
üìå Bao Viet Bank => BVB  
üìå Orient Commercial Bank => OCB 

‚ö†Ô∏è L∆∞u √Ω: ‚ùå Kh√¥ng h·ªó tr·ª£ ho√†n ti·ªÅn n·∫øu b·∫°n nh·∫≠p sai th√¥ng tin T√†i kho·∫£n. 
‚ùóÔ∏è N·∫°p min 10K
***""")
    napdiem = await client.listen(user_id=user_id)
    await process_account_info_nap(_, napdiem, user_id)

  #await bot.answer_callback_query(callback_query.id, "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c n·∫°p ƒëi·ªÉm.")


#@bot.on_callback_query(filters.text & nap in ["napmomo_account", "napbank_account"])
async def process_account_info_nap(_, napdiem, user_id):
  try:
    account_info = napdiem.text
    #user_id = message.from_user.id

    if nap[user_id] == "napmomo_account":
      nap[user_id] = (account_info, "withdraw_amount_napmomo")
      await bot.send_message(user_id,
          """
‚ùóÔ∏èNh·∫≠p s·ªë ƒëi·ªÉm b·∫°n mu·ªën n·∫°p qua MoMoüíÆ
üö´VD: 10000 - 50000000üöÆ
            """)
      diemnap = await client.listen(user_id=user_id)
      await process_withdraw_amountnap(diemnap, user_id)
    elif nap[user_id] == "napbank_account":
      nap[user_id] = (account_info, "withdraw_amount_napbank")
      await bot.send_message(user_id,
          """
‚ùóÔ∏èNh·∫≠p s·ªë ƒëi·ªÉm b·∫°n mu·ªën n·∫°p qua ng√¢n h√†ngüíÆ
üö´VD: 10000 - 50000000üöÆ
            """)
      diemnap = await client.listen(user_id=user_id)
      await process_withdraw_amountnap(diemnap, user_id)
  except ValueError:
    pass


#@bot.on_message(nap in ["withdraw_amount_napmomo", "withdraw_amount_napbank"])
async def process_withdraw_amountnap(diemnap, user_id):
  load_balance_from_file()
  if user_id in nap and nap[user_id][1] in ["withdraw_amount_napmomo", "withdraw_amount_napbank"]:
    user = await bot.get_users(user_id)
    if diemnap.text.isdigit():
      account_info, withdraw_amount_type = nap[user_id]
      withdraw_amount = int(diemnap.text)
      #user_id = message.from_user.id
      user_balance_value = user_balance.get(user_id, 0)

      if withdraw_amount < 10000:
        await bot.send_message(user_id,
            """
üñá S·ªë ƒëi·ªÉm n·∫°p ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 10,000 ƒë·ªìng.üó≥
              """)
        del nap[user_id]
        return

      formatted_balance = "{:,.0f} ƒë".format(user_balance_value)

      account_type = "MoMo" if withdraw_amount_type == "withdraw_amount_napmomo" else "ng√¢n h√†ng"
      await bot.send_message(user_id,
          f"""
‚è∫L·ªánh n·∫°p: {withdraw_amount:,} VNƒêüîö
‚úÖC·ªßa b·∫°n t·ª´ {account_type}: {account_info} ƒëang ch·ªù h·ªá th·ªëng checküîö
‚ò¢Ô∏èS·ªë ƒëi·ªÉm tr∆∞·ªõc khi n·∫°p c·ªßa b·∫°n: {formatted_balance}
              """)
      napmomo_account = "108002189644"
      photo_link = "https://github.com/tmq247/taxu2/blob/main/photo_2023-12-08_03-22-58.jpg?raw=true"
      caption = f"""
üèßPh∆∞∆°ng Th·ª©c N·∫°p Banküèß
üí∞ Ng√¢n h√†ng PVCOM üí∞
üîäT√†i Kho·∫£n: {napmomo_account}üîö

üîäN·ªôi Dung: napdiem_{user.id} üîö

üîäMin N·∫°p: 10.000k Min R√∫t: 100.000k
üîäMin N·∫°p: 10.000 - 3.000.000üîö
üîäVui l√≤ng ghi ƒë√∫ng n·ªôi dung n·∫°p ƒëi·ªÉm.üîö
üîäVui l√≤ng ch·ª•p l·∫°i bill.üîö
üîäKh√¥ng H·ªó Tr·ª£ L·ªói N·ªôi Dung.üîö
üîäN·∫†P NHANH B·∫∞NG M√É QR PH√çA B√äN D∆Ø·ªöI NH√â üîö
      """
      await bot.send_message(user_id, caption)
      await bot.send_photo(user_id, photo_link)

      request_message = f"""
‚û§T√™n Ng∆∞·ªùi N·∫°p: {user.mention} 
‚û§ID Ng∆∞·ªùi N·∫°p: {user.id}
‚û§Y√™u C·∫ßu N·∫°p: {withdraw_amount:,} VNƒê ( {withdraw_amount} )
‚û§T·ª´ {account_type}: {account_info}
          """
      requests.get(f"https://api.telegram.org/bot{bot_token3}/sendMessage?chat_id={admin_id}&text={request_message}")
      requests.get(f"https://api.telegram.org/bot{bot_token3}/sendMessage?chat_id={admin_id2}&text={request_message}")
      requests.get(f"https://api.telegram.org/bot{bot_token3}/sendMessage?chat_id={admin_id3}&text={request_message}")
      await bot.send_message(group_id3, request_message)

      del nap[user_id]

@bot.on_message(filters.command("listdata"))
async def list(_, message: Message):
    chat_id = message.chat.id
    if chat_id == group_id2 or group_id3:
        ls = f"user_state: {user_state}"
        ls += f"rut: {rut}"
        ls += f"nap: {nap}"
        ls += f"user_balance: {user_balance}"
        ls += f"user_bet_history: {user_bet_history}"
        ls += f"user_withdraw_history: {user_withdraw_history}"
        ls += f"napuser_withdraw_history: {napuser_withdraw_history}"
        ls += f"used_gitcodes: {used_gitcodes}"
        ls += f"gitcode_amounts: {gitcode_amounts}"
        ls += f"user_pending_gitcodes: {user_pending_gitcodes}"
        ls += f"user_game_state: {user_game_state}"
        ls += f"user_balances: {user_balances}"
        ls += f"user_bets: {user_bets}"
        await bot.send_message(chat_id, ls)

@bot.on_message(filters.command("xoalist"))
async def list(_, message: Message):
    chat_id = message.chat.id
    if chat_id == group_id2 or group_id3:
        user_state.clear()
        rut.clear()
        nap.clear()
        user_balance.clear()
        user_bet_history.clear()
        user_withdraw_history.clear()
        napuser_withdraw_history.clear()
        used_gitcodes.clear()
        gitcode_amounts.clear()
        user_pending_gitcodes.clear()
        user_game_state.clear()
        user_balances.clear()
        user_bets.clear()
        await bot.send_message(chat_id, "ƒê√£ clear data")
                         

#################################

#def on_exit():
  #save_balance_to_file()

# X·ª≠ l√Ω khi bot b·ªã t·∫Øt ho·∫∑c l·ªói
#atexit.register(save_balance_to_file)

@bot.on_message(filters.command("tatbot"))
@atexit.register
async def dong(_, message: Message):
    chat_id = message.chat.id
    #save_balance_to_file()
    await bot.send_message(chat_id, "T·∫Øt Bot ƒëi·ªÉm")
    

##################################
async def main2():


    await bot.start()
    print(
        """
-----------------
| Taxu kh·ªüi ƒë·ªông! |
-----------------
"""
    )
    user_state.clear()
    rut.clear()
    nap.clear()
    user_balance.clear()
    user_bet_history.clear()
    user_withdraw_history.clear()
    napuser_withdraw_history.clear()
    used_gitcodes.clear()
    gitcode_amounts.clear()
    user_pending_gitcodes.clear()
    user_game_state.clear()
    user_balances.clear()
    user_bets.clear()
    await bot.send_message(group_id3, "bot ƒêi·ªÉm ƒë√£ m·ªü")
    await idle()


loop = get_event_loop()
loop.run_until_complete(main2())

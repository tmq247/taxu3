import re
import os
from asyncio import gather, get_event_loop, sleep

from aiohttp import ClientSession
from pyrogram import Client, filters, idle
from Python_ARQ import ARQ
import requests
import random
from datetime import datetime, timedelta
import time
import atexit
import pytz
import threading
import asyncio
from pyrogram import filters
from pyrogram.types import ForceReply, Message, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent, MessageEntity, ReplyKeyboardMarkup
from pyrogram.filters import command
from functions import (
    extract_user,
    extract_user_and_reason,
    time_converter,
)
from pyrogram.enums import MessageEntityType
#import telebot
#from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
#from telebot import TeleBot, types
from config import bot_token, bot_token2, bot_token3, group_id, group_id2, group_id3, admin_id, admin_id2, admin_id3, channel_id, admin, admin2

is_config = os.path.exists("config.py")

if is_config:
    from config import *
else:
    from sample_config import *

Luna = Client(
    ":luna:",
    bot_token=bot_token,
    api_id=api_id,
    api_hash=api_hash,
)

xx = Client(
    ":xx:",
    bot_token=bot_token,
    api_id=api_id2,
    api_hash=api_hash2,
    session_string=session_string,
)

bot_id = int(bot_token.split(":")[0])

###############
luu_cau = {}
mo_game = {}
topdiem = {}

# Dictionary to store user bets
user_bets = {}
winner = {}

# Dictionary to store user balances
user_balance = {}

#########################
chinhcau = {}
bot_trangthai = {}

# Add these variables for Gitcode handling
bot_FILE = "bot.txt"
# Function to create a Gitcode with a custom amount
def mo_bot(user_id):
    trangthai = "bot_game"
    if user_id in bot_trangthai:
        return
    if user_id not in bot_trangthai:
        bot_trangthai[user_id] = trangthai
        with open("bot.txt", "w") as f:
            f.write(f"{user_id} {trangthai}\n")
        return user_id
    

# Function to read Gitcodes from the file
def xem_bot():
    if os.path.exists("bot.txt"):
        with open("bot.txt", "r") as f:
            for line in f:
                user_id, trangthai  = line.strip().split()
                bot_trangthai[user_id] = trangthai
xem_bot()

# Function to remove a used Gitcode
def xoa_grid(grid):
    with open(grid_FILE, "r") as f:
        lines = f.readlines()
    with open(grid_FILE, "w") as f:
        for line in lines:
            if not line.startswith(grid):
                f.write(line)


# H√†m ƒë·ªÉ l∆∞u t·∫•t c·∫£ s·ªë d∆∞ v√†o t·ªáp vƒÉn b·∫£n
def save_balance_to_file():
    with open("id.txt", "w") as f:
        for user_id, balance in user_balance.items():
            f.write(f"{user_id} {balance}\n")

# H√†m ƒë·ªÉ ƒë·ªçc s·ªë d∆∞ t·ª´ t·ªáp vƒÉn b·∫£n v√† c·∫≠p nh·∫≠t v√†o t·ª´ ƒëi·ªÉn user_balance
def load_balance_from_file():
    if os.path.exists("id.txt"):
        with open("id.txt", "r") as f:
            for line in f:
                user_id, balance_str = line.strip().split()
                balance = float(balance_str)
                if balance.is_integer():
                    balance = int(balance)
                user_balance[int(user_id)] = balance
load_balance_from_file()

def get_user_info(user_id):
  try:
    user = bot.get_chat(user_id)
    return user
  except Exception as e:
    print("Error fetching user info:", e)
    return None

#######################################################

# Function to send a dice and get its value
def send_dice(chat_id):
    response = requests.get(f'https://api.telegram.org/bot{bot_token}/sendDice?chat_id={chat_id}')
    #response = Luna.send_dice(chat_id, "üé≤")
    if response.status_code == 200:
        data = response.json()
        if 'result' in data and 'dice' in data['result']:
            return data['result']['dice']['value']
    return None
    
# H√†m ki·ªÉm T√†i/X·ªâu
def calculate_tai_xiu(total_score):
  return "‚ö´Ô∏èT√†i" if 11 <= total_score <= 18 else "‚ö™Ô∏èX·ªâu"

@Luna.on_message(filters.command("tx"))
def start_taixiu(_, message: Message):
    xem_bot()
    chat_id = message.chat.id
    grid = chat_id
    if chat_id != group_id:
        return Luna.send_message(chat_id, "V√†o nh√≥m t.me/sanhallwin ƒë·ªÉ ch∆°i GAME.")
    if len(mo_game) == 0:
        grtrangthai = 1
        game_timer(message, grid, grtrangthai)
        
    if len(mo_game) > 0 and mo_game[grid]['tthai'] == 2:
        return Luna.send_message(chat_id, "ƒê·ª£i 10s ƒë·ªÉ m·ªü v√°n m·ªõi.")
        
    if len(mo_game) > 0 and mo_game[grid]['tthai'] == 1:
        total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets])
        total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets])
        nut = [
        [
            InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot?start=hi"),
            InlineKeyboardButton(" Bot N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
        ],
            [InlineKeyboardButton("V√†o nh√≥m ƒë·ªÉ ch∆°i GAME", url="https://t.me/sanhallwin"),],]
        reply_markup = InlineKeyboardMarkup(nut)
        Luna.send_message(chat_id, f"ƒêang ƒë·ª£i ƒë·ªï x√∫c x·∫Øc\n L∆ØU √ù : H√ÉY B·∫§M V√ÄO 2 N√öT B√äN D∆Ø·ªöI, ƒê·ªÇ C√ì TH·ªÇ CH∆†I GAME.", reply_markup=reply_markup)
        nut2 = [
        [
            InlineKeyboardButton("Soi c·∫ßu", url="https://t.me/kqtaixiu"),
            InlineKeyboardButton("N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
        ],]
        reply_markup2 = InlineKeyboardMarkup(nut2)
        Luna.send_message(group_id, f"""
‚îè ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ
‚î£‚û§‚ö´Ô∏èT·ªïng c∆∞·ª£c b√™n T√ÄI: {total_bet_T:,}ƒë
‚î£‚û§‚ö™Ô∏èT·ªïng c∆∞·ª£c b√™n X·ªàU: {total_bet_X:,}ƒë
‚îó ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ
""", reply_markup=reply_markup2)

    else: 
        mo_game.clear()

def game_timer(message, grid, grtrangthai):
    mo_game[grid] = {'tthai': 0}  # Initialize the user's bets if not already present
    mo_game[grid]['tthai'] += grtrangthai
    print(mo_game,1)
    nut = [
        [
            InlineKeyboardButton("Bot N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
            InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot?start=hi"),
        ],]
    reply_markup = InlineKeyboardMarkup(nut)
    text1 = Luna.send_message(group_id, "B·∫Øt ƒë·∫ßu v√°n m·ªõi! C√≥ 90 gi√¢y ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c\n L∆ØU √ù : H√ÉY B·∫§M V√ÄO 2 N√öT B√äN D∆Ø·ªöI, ƒê·ªÇ C√ì TH·ªÇ CH∆†I GAME.", reply_markup=reply_markup)
    time.sleep(30)
    text2 = Luna.send_message(group_id, "C√≤n 60s ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
    
    time.sleep(20)  # Wait for 120 seconds
    text3 = Luna.send_message(group_id, "C√≤n 40s ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
    Luna.delete_messages(grid, text2.id)

    time.sleep(30)  # Wait for 120 seconds
    text4 = Luna.send_message(group_id, "C√≤n 10s ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
    Luna.delete_messages(grid, text3.id)
    time.sleep(10)  # Wait for 120 seconds
    
    Luna.delete_messages(grid, text1.id)
    Luna.delete_messages(grid, text4.id)
    start_game(message, grid)

@Luna.on_message(filters.command(["t", "x"]) & filters.text)
def handle_message(_, message: Message):
    #load_balance_from_file()
    chat_id = message.chat.id
    user_id = message.from_user.id
    #user_id = Luna.get_users(from_user).id
    grid = chat_id
    print(bot_trangthai,1)
    xem_bot()
    print(bot_trangthai,2)
    if chat_id != group_id:
        return Luna.send_message(chat_id, "V√†o nh√≥m t.me/sanhallwin ƒë·ªÉ ch∆°i GAME.")
    #if user_id not in bot_trangthai:
        #nut = [
        #[
        #    InlineKeyboardButton("Bot N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
        #    InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot?start=hi"),
        #],]
        #reply_markup = InlineKeyboardMarkup(nut)
        #return Luna.send_message(chat_id, "L·ªói!!! Vui l√≤ng b·∫•m v√†o c·∫£ 2 n√∫t b√™n d∆∞·ªõi v√† th·ª≠ l·∫°i.", reply_markup=reply_markup)
    if len(mo_game) > 0 and mo_game[grid]['tthai'] == 2:
        return Luna.send_message(chat_id, "ƒê·ª£i 10s ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c v√°n ti·∫øp theo.")
    
    # Check if the message is from the group chat
    if chat_id == group_id:
        # Check if the message is a valid bet
        if message.text and message.text.upper() in ['/T ALL', '/X ALL'] or (message.text and message.text.upper()[1] in ['T', 'X'] and message.text[3:].isdigit()): 
            ten_ncuoc = message.from_user#.mention#first_name
            bet_type = message.text.upper()[1]
            if message.text.upper() == '/T ALL' or message.text.upper() == '/X ALL':
                bet_amount = user_balance.get(user_id, 0)  # Use the entire balance
            else:
                bet_amount = int(message.text[3:])
            # Confirm the bet and check user balance
            confirm_bet(user_id, bet_type, bet_amount, ten_ncuoc, message)
        else:
            Luna.send_message(chat_id, "L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng tu√¢n th·ªß theo quy t·∫Øc c∆∞·ª£c.")
    if len(mo_game) == 0:
            grtrangthai = 1
            grid = chat_id
            game_timer(message, grid, grtrangthai)

    
              

# Function to confirm the bet and check user balance
def confirm_bet(user_id, bet_type, bet_amount, ten_ncuoc, message):
    load_balance_from_file()
    if bet_type == 'T':
        cua_cuoc = '‚ö´Ô∏èT√†i'
    else:
        cua_cuoc = '‚ö™Ô∏èX·ªâu'
    diemcuoc = f"{ten_ncuoc.mention} ƒë√£ c∆∞·ª£c {cua_cuoc} {bet_amount:,} ƒëi·ªÉm."
    
    # Check if the user_id is present in user_balance dictionary
    if user_id in user_balance:
        if bet_amount <= 0 and user_balance[user_id] <= 0:
            return Luna.send_message(user_id, "B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c, vui l√≤ng n·∫°p ƒëi·ªÉm.")
        # Check user balance
        if user_balance[user_id] >= bet_amount:
            try:
                if user_id in user_bets:
                    user_bets[user_id][bet_type] += bet_amount  
                else:
                    user_bets[user_id] = {'T': 0, 'X': 0}  # Initialize the user's bets if not already present
                    user_bets[user_id][bet_type] += bet_amount
                user_balance[user_id] -= bet_amount
                text = f"""{diemcuoc} \nC∆∞·ª£c ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n."""
                balance = user_balance.get(user_id, 0)
                text += f"C√≤n {balance:,} ƒëi·ªÉm"
                request_message = f"""{diemcuoc} \nC∆∞·ª£c ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n."""
                #requests.get(f"https://api.telegram.org/bot{bot_token2}/sendMessage?chat_id={user_id}&text={request_message}")
                #requests.get(f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={group_id2}&text={text}")
                xx.send_message(user_id, request_message)
                Luna.send_message(group_id, request_message)
                Luna.send_message(group_id2, text)
                save_balance_to_file()
                load_balance_from_file()
            
            except Exception as e:
                print("Error fetching user info:", e)
                Luna.send_message(group_id3, f"L·ªói:{e}")
                Luna.send_message(group_id, f"L·ªói:{ten_ncuoc.mention} ch∆∞a kh·ªüi ƒë·ªông Bot @alltowin_bot, h√£y kh·ªüi ƒë·ªông bot v√† ƒë·∫∑t c∆∞·ª£c l·∫°i.")

        else:
            Luna.send_message(group_id, "Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c. Vui l√≤ng ki·ªÉm tra l·∫°i s·ªë d∆∞ c·ªßa b·∫°n.")
    else:
        soicau = [
        [
            InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot"),
            InlineKeyboardButton(" Bot N·∫°p - R√∫t", url="https://t.me/diemallwin_bot"),
        ],]
        reply_markup = InlineKeyboardMarkup(soicau)
        Luna.send_message(group_id, f"Ng∆∞·ªùi ch∆°i ch∆∞a kh·ªüi ƒë·ªông Luna, vui l√≤ng kh·ªüi ƒë·ªông bot v√† th·ª≠ l·∫°i. \nH√ÉY V√ÄO 2 BOT B√äN D∆Ø·ªöI, KH·ªûI ƒê·ªòNG BOT ƒê·ªÇ C√ì TH·ªÇ CH∆†I GAME.", reply_markup=reply_markup)

#####################################
@Luna.on_message(filters.command("ct"))
def chinh_cautai(_, message: Message):
    #lenh = message.text.split()
    #print(lenh)
    user_id = message.from_user.id
    if user_id in admin2:
        chinhcau[group_id] = {"c·∫ßu": 0}
        ccau = 1
        chinhcau[group_id]["c·∫ßu"] += ccau
        Luna.send_message(user_id, f"{chinhcau}")

@Luna.on_message(filters.command("cx"))
def chinh_cauxiu(_, message: Message):
    #lenh = message.text.split()
    #print(lenh)
    user_id = message.from_user.id
    if user_id in admin2:
        chinhcau[group_id] = {"c·∫ßu": 0}
        ccau = 2
        chinhcau[group_id]["c·∫ßu"] += ccau
        Luna.send_message(user_id, f"{chinhcau}")
#########################################

# Function to start the dice game
def start_game(message, grid):
    #load_balance_from_file()
    grtrangthai2 = 1
    print(mo_game,2)
    mo_game[grid]['tthai'] += grtrangthai2
    print(mo_game,3)
    soicau = [
        [
            InlineKeyboardButton("Soi c·∫ßu", url="https://t.me/kqtaixiu"),
            InlineKeyboardButton("N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
        ],]
    reply_markup = InlineKeyboardMarkup(soicau)
    total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets])
    total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets])
    text = "H·∫øt th·ªùi gian c∆∞·ª£c. K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c c√¥ng b·ªë ngay sau ƒë√¢y.\n üí• B·∫Øt ƒë·∫ßu tung XX üí•"
    text += f"""
‚îè ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ
‚î£‚û§‚ö´Ô∏èT·ªïng c∆∞·ª£c b√™n T√ÄI: {total_bet_T:,}ƒë
‚î£‚û§‚ö™Ô∏èT·ªïng c∆∞·ª£c b√™n X·ªàU: {total_bet_X:,}ƒë
‚îó ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ\n
"""
    text4 = Luna.send_message(group_id, text)
    idtext4 = text4.id
    time.sleep(3)  # Simulating dice rolling
    ##########################################
    groupxx = "-1002066845150"
    response = Luna.send_dice(groupxx, "üé≤")
    response2 = Luna.send_dice(groupxx, "üé≤")
    response3 = Luna.send_dice(groupxx, "üé≤")
    tx = response.dice.value
    tx2 = response2.dice.value
    tx3 = response3.dice.value
    result = [tx, tx2, tx3]
    total_score = sum(result)

    if len(chinhcau) !=0 and chinhcau[group_id]["c·∫ßu"] == 2:
        print("x·ªâu")
        while total_score >= 11:
            response.delete()
            response2.delete()
            response3.delete()
            response = Luna.send_dice(groupxx, "üé≤")
            response2 = Luna.send_dice(groupxx, "üé≤")
            response3 = Luna.send_dice(groupxx, "üé≤")
            tx = response.dice.value
            tx2 = response2.dice.value
            tx3 = response3.dice.value
            result = [tx, tx2, tx3]
            total_score = sum(result)

    elif len(chinhcau) != 0 and chinhcau[group_id]["c·∫ßu"] == 1:
        print("t√†i")
        while total_score < 11:
            response.delete()
            response2.delete()
            response3.delete()
            response = Luna.send_dice(groupxx, "üé≤")
            response2 = Luna.send_dice(groupxx, "üé≤")
            response3 = Luna.send_dice(groupxx, "üé≤")
            tx = response.dice.value
            tx2 = response2.dice.value
            tx3 = response3.dice.value
            result = [tx, tx2, tx3]
            total_score = sum(result)

    chinhcau.clear()
    ########################################################
    #result = [send_dice(group_id) for _ in range(3)]
    #total_score = sum(result)
    fw = Luna.forward_messages(group_id, groupxx, response)
    fw2 = Luna.forward_messages(group_id, groupxx, response2)
    fw3 = Luna.forward_messages(group_id, groupxx, response3)
    fw4 = Luna.forward_messages(channel_id, groupxx, [response, response2, response3])
    kq = f"‚û§K·∫æT QU·∫¢ XX: {' + '.join(str(x) for x in result)} = {total_score} ƒëi·ªÉm {calculate_tai_xiu(total_score)}\n"
    kq1 = f"‚û§K·∫æT QU·∫¢ XX: {' + '.join(str(x) for x in result)} = {total_score} ƒëi·ªÉm {calculate_tai_xiu(total_score)}\n"
    ls_cau(result)
    Luna.send_message(channel_id, kq)
    # Determine the winner and calculate total winnings
    #tien_thang = 0
    total_win = 0
    load_balance_from_file()
    for user_id in user_bets:
        if sum(result) >= 11 and user_bets[user_id]['T'] > 0:
            total_win += int(user_bets[user_id]['T'] * tile_thang)
            winner[user_id] = []
            winner[user_id] += [int(user_bets[user_id]['T'] * tile_thang)] 
            #tien_thang = user_bets[user_id]['T'] * tile_thang
            user_balance[user_id] += (int(user_bets[user_id]['T'] * tile_thang))

        elif sum(result) < 11 and user_bets[user_id]['X'] > 0:
            total_win += int(user_bets[user_id]['X'] * tile_thang)
            winner[user_id] = []
            winner[user_id] += [int(user_bets[user_id]['X'] * tile_thang)]
            #tien_thang = user_bets[user_id]['X'] * tile_thang
            user_balance[user_id] += (int(user_bets[user_id]['X'] * tile_thang))
            
    save_balance_to_file()
    load_balance_from_file()
    
    for user_id, diem in winner.items():
        balance = user_balance.get(user_id, 0)
        user_ids = Luna.get_users(user_id)
        user_id1 = message.from_user.id
        #user_id2 = message.from_user.first_name
        diem = diem[0]
        kq += f"""{user_ids.mention} th·∫Øng {diem:,} ƒëi·ªÉm.\n"""
        kq1 += f"""{user_ids.mention} th·∫Øng {diem:,} ƒëi·ªÉm.C√≥ {balance:,} ƒëi·ªÉm\n"""
        #kq1 += f"{user_id1} c√≥ {balance:,} ƒëi·ªÉm"
        #requests.get(f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={user_id}&text={kq1}")
        xx.send_message(user_id, kq)
        
    kq += f"""
T·ªïng th·∫Øng: {total_win:,}ƒë
T·ªïng thua: {total_bet_T + total_bet_X - total_win:,}ƒë
    """  
    Luna.send_message(group_id, kq, reply_markup=reply_markup)
    Luna.send_message(group_id2, kq1)
    
    
    user_bets.clear()
    winner.clear()
    luu_cau.clear()
    time.sleep(5)
    fw.delete()
    fw2.delete()
    fw3.delete()
    time.sleep(7)
    mo_game.clear()
    idtext4.delete()

@Luna.on_message(filters.command("diem"))
async def check_balance(_, message: Message):
    load_balance_from_file()
    from_user = message.from_user#
    if len(message.text.split()) == 1 and not message.reply_to_message:
        if from_user.id not in user_balance:
            return await Luna.send_message(message.chat.id, f"{from_user.mention} ch∆∞a kh·ªüi ƒë·ªông bot. Vui l√≤ng kh·ªüi ƒë·ªông bot.")
        balance = user_balance.get(from_user.id, 0)
        await Luna.send_message(message.chat.id, f"üë§ S·ªë ƒëi·ªÉm c·ªßa {from_user.mention} l√† {balance:,} ƒëi·ªÉm üí∞")
        await Luna.send_message(group_id2, f"üë§ S·ªë ƒëi·ªÉm c·ªßa {from_user.mention} l√† {balance:,} ƒëi·ªÉm üí∞")
        return
    if len(message.text.split()) == 1 and message.reply_to_message: 
        user_id, username = await extract_user_and_reason(message)#
        user = await Luna.get_users(user_id)#
        if user_id in admin:
            return
        if not user_id: #
            return await message.reply_text("kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y")
        if user_id not in user_balance:
            return Luna.send_message(message.chat.id, f"{user.mention} ch∆∞a kh·ªüi ƒë·ªông bot. Vui l√≤ng kh·ªüi ƒë·ªông bot.")
        balance = user_balance.get(user_id, 0)
        await Luna.send_message(message.chat.id, f"üë§ S·ªë ƒëi·ªÉm c·ªßa {user.mention} l√† {balance:,} ƒëi·ªÉm üí∞")
        await Luna.send_message(group_id2, f"üë§ S·ªë ƒëi·ªÉm c·ªßa {user.mention} l√† {balance:,} ƒëi·ªÉm üí∞")
        return
    else:
        user_id, username = await extract_user_and_reason(message)#
        user = await Luna.get_users(user_id)#
        if user_id in admin:
            return
        if not user_id: #
            return await message.reply_text("kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y")
        if user_id not in user_balance:
            return Luna.send_message(message.chat.id, f"{user.mention} ch∆∞a kh·ªüi ƒë·ªông bot. Vui l√≤ng kh·ªüi ƒë·ªông bot.")
        balance = user_balance.get(user_id, 0)
        await Luna.send_message(message.chat.id, f"üë§ S·ªë ƒëi·ªÉm c·ªßa {user.mention} l√† {balance:,} ƒëi·ªÉm üí∞")
        await Luna.send_message(group_id2, f"üë§ S·ªë ƒëi·ªÉm c·ªßa {user.mention} l√† {balance:,} ƒëi·ªÉm üí∞")

def loai_cau(total_score):
  return "‚ö´Ô∏è" if 11 <= total_score <= 18 else "‚ö™Ô∏è"
    
def ls_cau(result):
    total_score = sum(result)
    cau = loai_cau(total_score)
    if cau not in luu_cau:
        luu_cau[cau] = []
        luu_cau[cau].append(cau)
    try:
        soicau_text = f"{cau}\n"
        with open("soicau.txt", "a", encoding='utf-8') as soicau_file:
            soicau_file.write(soicau_text)
    except Exception as e:
        print(f"Error saving history: {str(e)}")

@Luna.on_message(filters.command("soicau"))
def soicau_taixiu(_, message: Message):
    #xem_bot()
    chat_id = message.chat.id
    #load_cau_from_file()
    soicau = [
        [
            InlineKeyboardButton("Soi c·∫ßu", url="https://t.me/kqtaixiu"),
            InlineKeyboardButton("N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
        ],]
    reply_markup = InlineKeyboardMarkup(soicau)
    with open("soicau.txt", "r", encoding='utf-8') as f:
        lines = f.read().splitlines()[-1:-11:-1]
        scau = f"10 l·∫ßn c·∫ßu g·∫ßn nh·∫•t:\n"
        for line in lines:
            cau = line.strip().split()
            cau1 = cau[0]
            cau2 = "".join(reversed(cau1))
            scau += f"""{cau2}<-"""
        Luna.send_message(chat_id, scau, reply_markup=reply_markup)

@Luna.on_message(filters.command("start"))
def show_main_menu(_, message: Message):
    user_id = message.from_user.id
    #load_balance_from_file()
    #if user_id not in bot_trangthai and filters.private:
        #mo_bot(user_id)
        #print(bot_trangthai)
  # Check if the user is already in the user_balance dictionary
    #xem_bot()
    if user_id not in user_balance:
        user_balance[user_id] = 0  # Set initial balance to 0 for new users
        save_balance_to_file()  # Save user balances to the text file
    nut = [
        [
            InlineKeyboardButton("Soi c·∫ßu", url="https://t.me/kqtaixiu"),
            InlineKeyboardButton("Bot N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
        ],
        [
            InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot?start=hi"),
            InlineKeyboardButton("V√†o nh√≥m ƒë·ªÉ ch∆°i GAME", url="https://t.me/sanhallwin"),
        ],]
    reply_markup = InlineKeyboardMarkup(nut)
  # Send a message with a photo link
    photo_url = "https://github.com/tmq247/taxu2/blob/main/photo_2023-12-14_21-31-58.jpg?raw=true"
    caption = """
<code>ùêí·∫£ùêßùê° ùêÄùêãùêã ùêñùêàùêç</code>
        
<b>‚ô®Ô∏èOpen 15-12 ‚ô®Ô∏è</b>

ü§ù <strong>N∆°i h·ªôi t·ª• c√°c chi·∫øn th·∫ßn t√†i-x·ªâu</strong> üéÅ

‚ö°Ô∏è <b>T·ªâ l·ªá th·∫Øng c∆∞·ª£c 1.95</b> üí∏

üî∞ <b>N·∫°p-r√∫t uy t√≠n, ch·∫•t l∆∞·ª£ng</b> üëå

üÜò <b>100% xanh ch√≠n</b> ‚úÖ

‚ö†Ô∏è <b>Tuy·ªát ƒë·ªëi kh√¥ng gian l·∫≠n ch·ªânh c·∫ßu</b> ‚ùóÔ∏è

üìé <b> https://t.me/sanhallwin</b> 

<b> L∆ØU √ù : H√ÉY B·∫§M V√ÄO 2 N√öT B√äN D∆Ø·ªöI, ƒê·ªÇ C√ì TH·ªÇ CH∆†I GAME<b>
"""
    Luna.send_photo(message.chat.id,
                 photo_url,
                 caption=caption,
                 reply_markup=reply_markup)

@Luna.on_message(filters.command("hdan"))
def soicau_taixiu(_, message: Message):
    chat_id = message.chat.id
    text = f"""
H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh c·ªßa bot
/tx :m·ªü game t√†i x·ªâu
/t ƒëi·ªÉm: ƒë·∫∑t c·ª≠a t√†i v·ªõi s·ªë ƒëi·ªÉm mu·ªën c∆∞·ª£c (/t all: ƒë·ªÉ all in t√†i).
/x ƒëi·ªÉm: ƒë·∫∑t c·ª≠a x·ªâu v·ªõi s·ªë ƒëi·ªÉm mu·ªën c∆∞·ª£c (/x all: ƒë·ªÉ all in x·ªâu).
/diem :ƒë·ªÉ xem ƒëi·ªÉm hi·ªán c√≥
/soicau :ƒë·ªÉ soi c·∫ßu
/tangdiem [id ng∆∞·ªùi nh·∫≠n] s·ªë ƒëi·ªÉm mu·ªën t·∫∑ng :ƒë·ªÉ t·∫∑ng ƒëi·ªÉm cho ng∆∞·ªùi kh√°c (b·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi tin nh·∫Øn c·ªßa ng∆∞·ªùi mu·ªën t·∫∑ng ƒë·ªÉ nh·∫≠p l·ªánh t·∫∑ng v√† s·ªë ƒëi·ªÉm mu·ªën t·∫∑ng) .L∆∞u √Ω :ph√≠ t·∫∑ng 5%.
/nap :ƒë·ªÉ n·∫°p ƒëi·ªÉm
/rut :ƒë·ªÉ r√∫t ƒëi·ªÉm
/code [code c·ªßa b·∫°n] :ƒë·ªÉ nh·∫≠n ƒëi·ªÉm b·∫±ng code

L∆ØU √ù: B·∫§M V√ÄO 2 N√öT B√äN D∆Ø·ªöI ƒê·ªÇ CH∆†I GAME.
"""
    nut = [
        [
            InlineKeyboardButton("Bot N·∫°p - R√∫t", url="https://t.me/diemallwin_bot?start=hi"),
            InlineKeyboardButton("Bot GAME", url="https://t.me/alltowin_bot?start=hi"),
        ],]
    reply_markup = InlineKeyboardMarkup(nut)
    Luna.send_message(message.chat.id, text, reply_markup=reply_markup)


@Luna.on_message(filters.command("listdata"))
def listdiem(_, message: Message):
    chat_id = message.chat.id
    with open("id.txt", "r") as f:
        a = f.read()
        print(a)
        aa = a.split()
        print(aa)
        for line in a:
            print(line)
            print(len(line))
            diem = line.strip().split()
            #print(user_id)
            print(diem)
            b = sorted(line, diem)
            print(b)
        #Luna.send_message(group_id2, f"{b}")
        #ls = f"user_balance: {user_balance}"
        #Luna.send_message(chat_id, ls)
    

@Luna.on_message(filters.command("topdiem"))
def top_diem(_, message: Message):
    #load_balance_from_file()
    chat_id = message.chat.id
    if chat_id == group_id2 or chat_id == group_id3:
        top = f"Top 10 ƒëi·ªÉm cao nh·∫•t:\n"
        
        
        
        td = sorted(user_balance)
        for diem in user_balance:
            diem = user_balance.get(td[0], 0)
            top += f"""{td}: {diem}\n"""
            print(td: diem)
                #topdiem[int(user_id)] += (int(diem))
                # = "/n".join(reversed(diem))
        #Luna.send_message(chat_id, top)
            
        #for user_id, balance in user_balance.items():
            #topdiem = []
            #topdiem += [user_id], [balance]
        #Luna.send_message(group_id2, f"{topdiem}")

#@Luna.on_message(filters.command("listdata"))
def list(_, message: Message):
    chat_id = message.chat.id
    if chat_id == group_id2 or group_id3:
        ls = f"luu_cau: {luu_cau}"
        ls += f"mo_game: {mo_game}"
        ls += f"topdiem: {topdiem}"
        ls += f"user_bets: {user_bets}"
        ls += f"winner: {winner}"
        ls += f"user_balance: {user_balance}"
        ls += f"bot_trangthai: {bot_trangthai}"
        Luna.send_message(chat_id, ls)
        

@Luna.on_message(filters.command("xoalist"))
def list(_, message: Message):
    chat_id = message.chat.id
    if chat_id == group_id2 or group_id3:
        luu_cau.clear()
        mo_game.clear()
        topdiem.clear()
        user_bets.clear()
        winner.clear()
        user_balance.clear()
        bot_trangthai.clear()
        Luna.send_message(chat_id, "ƒê√£ clear data")


################################



#################################
@atexit.register
def on_exit():
    save_balance_to_file()
    request_message = f"Bot Game ƒë√£ t·∫Øt"
    #Luna.send_message(group_id3, "Bot Game ƒë√£ t·∫Øt")
    requests.get(f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={group_id3}&text={request_message}")
    print("Bot Game ƒë√£ t·∫Øt")

# X·ª≠ l√Ω khi bot b·ªã t·∫Øt ho·∫∑c l·ªói
#atexit.register(on_exit)

#@Luna.on_message(filters.command("tatbotgame"))
#@atexit.register
def dong(_, message):
    #chat_id = message.chat.id
    save_balance_to_file()
    Luna.send_message(group_id3, "T·∫Øt Bot Game")
    print("Bot game ƒë√£ t·∫Øt")
    Luna.stop()
    #loop.stop()
                                          
#xx.start()        
######################################################
async def main():
    await Luna.start()
    print(
        """
-----------------
| Luna kh·ªüi ƒë·ªông! |
-----------------
"""
    )
    luu_cau.clear()
    mo_game.clear()
    topdiem.clear()
    user_bets.clear()
    winner.clear()
    await Luna.send_message(group_id3, "Bot Game ƒë√£ m·ªü")
    await idle()


loop = get_event_loop()
loop.run_until_complete(main())
